#+TITLE: INF1010 - Eksamensnotater
#+AUTHOR: Eivind, Sjur, Annabelle & Martin
#+STARTUP: indent
#+LATEX_HEADER: \documentclass[a4paper,norsk,10pt]{article}
#+LATEX_HEADER: \usepackage{fullpage} %Utnytter større del av arket.
#+LATEX_HEADER: \usepackage[sc,osf]{mathpazo} %Pen font.
#+LATEX_HEADER: \usepackage[norsk]{babel} %Norsk språkpakke.
#+LATEX_HEADER: \usepackage{hyperref} %For lenker i latex-dokument.
#+LATEX_HEADER: \hypersetup{colorlinks=true,linkcolor=black} %Farge på lenker.
#+LATEX_HEADER: \usepackage{amsmath} %Større matematikkpakke.
#+LATEX_HEADER: \usepackage[usenames,dvipsnames]{color} %Flere farger.
#+LATEX_HEADER: \usepackage{parskip} %Norsk type linjeskift.
* Tall

  |--------+---------------------------------------|
  | *Type* | *Lovlige verdier*                     |
  |--------+---------------------------------------|
  | byte   | \pm{}127                              |
  |--------+---------------------------------------|
  | short  | \pm{}32 767                           |
  |--------+---------------------------------------|
  | int    | \pm{}2 147 483 647                    |
  |--------+---------------------------------------|
  | long   | \pm{}9 223 372 036 854 775 807L       |
  |--------+---------------------------------------|
  | float  | \pm{}3.402 823 47 E+38F               |
  |--------+---------------------------------------|
  | double | \pm{}1.797 693 134 862 315 70 E+308   |
  |--------+---------------------------------------|

  negative tall er har alltid en større range 

** Integere

   Integere er heltall, og lite annet.\\
   \newline
   Hvis vi vil konvertere en streng til en int sier vi:\\
   int x = Integer.parseInt("123");\\
   \newline
   Hvis vi vil konvertere et annet tall til int skriver vi:\\
   int x = (int) 3.14\\
   \newline 

   |----------------+---------------------+---------------------|
   | Operasjon      | Beskrivelse         | Eksempel            |
   |----------------+---------------------+---------------------|
   | +, -, *, /     | De fire regneartene | 1+1                 |
   |----------------+---------------------+---------------------|
   | ++             | legge til 1         | i++                 |
   |----------------+---------------------+---------------------|
   | --             | trekke fra 1        | i--                 |
   |----------------+---------------------+---------------------|
   | %              | modulo(rest)        | 5%2 -> 1            |
   |----------------+---------------------+---------------------|
   | Math.sqrt(...) | Kvadratrot          | Math.sqrt(4) -> 2   |
   |----------------+---------------------+---------------------|
   | Math.pow(x, y) | Potens (x^y)        | Math.pow(2, 3) -> 8 |
   |----------------+---------------------+---------------------|
  
   
   - Metodekall
     - ++ og --
     - * og /
     - + og -
     - -(som negativt fortegn)

   husk at:\\
   int x, y=1;\\
   x = y++ + y + ++y;\\
   nå er x = 6, fordi stykket blir 1 + 2 + 3. først er y = 1, og 
   så øker den slik at neste gang y brukes er den 2. 
   når vi skriver ++y så vil y være 3 før vi legger det til.

** desimaltall

   Jeg velger å bare leke med floats, men reglene er ca det samme som for int.\\

   konvertering fra heltall til desimaltall:\\
   float x = (3 + 0.0) / 2;\\

   altså vi bare legger til 0.0 som det som skjer først, slik at ett av tallene er
   et desimaltall, ellers vil vi få heltallsdivisjon. Enkelt og greit,
   utenom det gjelder de samme operatorene og de samme presidensreglene.

* Sannhetsverdier - boolean



  - &&
    - Og 
    - true && true
   - || 
     - Eller
     - true || false
   -'!'
     - ikke
       b = !false
   - < og > 
     - mindre enn, større enn
     - b = x<y
   - <= og >= 
     - mindre eller lik       
     - b = x<=y
   - ==       
     - er lik
     - b = x==y
   - !=
     - er ikke lik
     - b = x!=y

** presidensregler

   - Metodekall
     - !
     - <, <=, >=, >
     - ==, !=
     - \&\&
     - ||

* Tekst - strenger og char

  vi har strengen s = "kake"
  
  |-----------------+--------------------------------+------------------------|
  | Navn            | Forklaring                     | Eksempel               |
  |-----------------+--------------------------------+------------------------|
  | charAt(...)     | tegnet i gitt posisjon(fra 0)  | s.charAt(2)=='k'       |
  |-----------------+--------------------------------+------------------------|
  | length()        | gir lengden på teksten         | s.length()==4          |
  |-----------------+--------------------------------+------------------------|
  | substring(...)  | delteksten fra- og tilposisjon | s.substring(1,3)=="ak" |
  |                 | gir indeksen og ut             | s.substring(1)=="ake"  |
  |-----------------+--------------------------------+------------------------|
  | equals(...)     | tester likhet mellom strenger  | s.equals("kake")       |
  |-----------------+--------------------------------+------------------------|
  | indexOf(...)    | posisjonen til tegnet/tekst    | s.indexOf('a')==1      |
  |-----------------+--------------------------------+------------------------|
  | startsWith(...) | starter teksten med ...        | s.startsWith("ka")     |
  |-----------------+--------------------------------+------------------------|
  | endsWith(...)   | ender teksten med ...          | s.endsWith("ke")       |
  |-----------------+--------------------------------+------------------------|
  | compaireTo(...) | sammenligning av tekster       | s.compaireTo("bake")<0 |
  |-----------------+--------------------------------+------------------------|


** char

   en char-verdi er rett og slett en bokstav, den kan sammenlignes ('a' < 'b') 
   og vil da sammenlignes ut
   i fra ascii-verdier (alle store bokstaver er mindre enn de små bokstavene).

** String

   En string er en rekke med char-verdier, altså ord. Man kan legge ord
   sammen med pluss-opperatoren 
   ("heisann" + " " + navn), man kan konvertere tall til strenger på denne måten\\
   String s = "" + 42;\\
   og verdien til s vil være "42".

   Strenger kan også deles opp i arrayer ved hjelp av en split-funksjon. eks:\\
   string[ ] t = s.split(" ");

* Arrayer

  Arrayer er en indeksert(fra 0) gruppe av objekter. Man må definere
  størelsen når man lager objektet.
  #+BEGIN_SRC Java
  String[ ] a = new string[3];
  #+END_SRC
man kan nå finne lengden på arrayet og bruke det som en int a.length;

* Løkker og kontrollstrukturer

  | *Navn*   | *Beskrivelse*                       | *Eksempel*                                     |
  | for      | bestemt antall ganger               | for(int i=0;i<3;i++)\{\}                       |
  |          | alle objekter i array               | for(String s : a)\{\}                          |
  |          | alle objekter i hash                | for(String s : hm.values())                    |
  | while    | i mens test er sann                 | while(b)\{\}                                   |
  | do-while | utfører løkka før testen            | do \{\} while(b);                              |
  | switch   | Hopper mellom kodeblokker ved input | switch(c){case a: <>; break; default: <>;}     |

** while
   
   while-løkker er kanskje den enkleste formen for løkker, den gjør en blokk kode
   så lenge predikatet i parameteret er sant. 

   Man trenger ikke nødvendigvis å kjøre
   en kodeblokk, for eksempel hvis man har en boolsk funksjon ("kan()") som parameteret
   kan man kjøre koden "while(kan());" og dermed si at man skal kjøre helt til "kan()"
   returnerer false.

** for
   
   for-løkker er en naturlig utvidelse av while da man ofte trenger tellere eller ting
   som skjer for hver gang kodeblokken skal kjøres, for eksempel en teller når man går
   igjennom et array.

   #+BEGIN_SRC Java
   for(int i=0;i<array.length;i++;){
     System.out.println(array[i])
   }
   #+END_SRC

   Men for-løkker kan brukes på andre måter da den har en ganske enkel måte å oppføre 
   seg på "for(initialiseringskode;predikat;postkode)", eneste som det er strengt hva 
   man må ha i en for-løkke er predikatet. initialiseringen, kan være å sette en teller
   til noe, eller når man går igjennom noder i en graf, så kan man f.eks sette 
   src_java{for(Node n = root;n.next!=null;n=n.next)}

** while .. do
   
   Mindre brukt løkketype, egentlig en while-løkke hvor koden kjøres minst en gang før
   predikatet blir testet.
  
** switch

Ved bruk av if-setning kan man velge en av to muligheter ved at
setningen som evalueres er /true/ eller /false/. Med /switch/ kan man
velge mellom mange inputpåstander som er /integers/, /chars/ eller /enums/. 

#+BEGIN_SRC Java
switch (<utrrykk>) {
    case verdi1: <settninger>; break;
    etc..
    default: <kjøres ved ingen treff ved <uttrykk> >;
}
#+END_SRC
* Hasshmaps

  Hashmaps er en enkel måte å ordne mange objekter med et objekt som
  indeks.\\
  import java.util.*\\
  HashMap<string,Person> personregister = new HashMap<String,Person>();\\
  
  |-----------------------+---------------------------------------------|
  | Metode                | beskrivelse                                 |
  |-----------------------+---------------------------------------------|
  | put(nøkkel, peker)    | legge til objekt i HM                       |
  |-----------------------+---------------------------------------------|
  | get(nøkkel)           | hente peker til objekt                      |
  |-----------------------+---------------------------------------------|
  | remove(nøkkel)        | fjerne nøkkel fra HM                        |
  |-----------------------+---------------------------------------------|
  | containsKey(nøkkel)   | bool om nøkkelen er der                     |
  |-----------------------+---------------------------------------------|
  | containsValue(objekt) | bool om objektet er der                     |
  |-----------------------+---------------------------------------------|
  | values()              | lager en mengde av alle verdiene i HM,      |
  |                       | brukes til itterering                       |
  |-----------------------+---------------------------------------------|
  | keySet()              | brukes til å lage en mengde av alle nøklene |
  |                       | brukes til iterering                        |
  |-----------------------+---------------------------------------------|
  | isEmpty()             | returnerer true hvis tabellen er tom.       |
  |-----------------------+---------------------------------------------|
  | size()                | Metoden returnerer antall nøkler i tabellen |
  |-----------------------+---------------------------------------------|

Hashmaps
import java.util.*;

HashMap hashmapnavn = new HashMap();
hashmapnavn.put(nøkkel, verdi);

Hente: Bil b = (Bil) register.get(nøkkel);

Hente alle verdiene:
Iterator it = register.values().iterator();
while (it.hasNext()) {
    Bil b = (Bil) it.next();
}


containsKey(nøkkel) sjekker om objekt med nøkkelen finnes. Gir
true/false.
containsValue(verdi) sjekker om hashmap inneholder gitte objekt/verdi.
size() antall nøkler.

* UML

Diagrammer av programmene vårt.
Tegner selve strukturen til programmet.

-Objekdiagrammer. (UML-bokser med ev. variabler og argumenter etc.)
-Klassediagrammer. (bare koblingene etc.)

Tegner selve arkitekturen til programmet vårt. 

** Navneklassen

+public
-private
#protected
~package

Vi lager en modell av problemområdet vårt (også kalt domenemodell).
-Modell av probleme (og modell av databasen).

-Tegner streker mellom klassene. Og navn på forbindelsen.

Vi tegner hvor mange objekter det maksimalt kan være.

Vi har forskjellige skrivemåter for verdier:
1 - en
 * -  null, en eller flere
1..* - minst en
3,4,5 - tre fire eller fem

Tegner koblinger mellom de klassene du tenker programmet skal snakke
med.

Vi angir kun de mest sentrale dataene i UML-boksene.. F.eks. viktige
variabler og arrayer.
F.eks. :klasenavn [atributt-fekt (kan være tomt)].

-Pekere - piler

Tegner flere ved å legge en UML-boks som "skygge" bak.. En
representasjon for N antall.

* Lenkede lister
** Hva er en lenket liste?
En lenket liste er en liste med objekter refererer til neste, eller forrige objekt ved hjelp av pekere.

-Lenket liste. Trenger ikke ta stilling til antall fra start.
-Alle objekter er lenket til hverandre, eget objekt som peker på
-første objektet.
-Må søke i listen forfra for å finne objekter.


#+INCLUDE: "code/lenketeksempel.java" src java

Hvilke operasjoner trenger vi?
- Sette inn ny person
- Finne en person
- fjerne en person
...

#+INCLUDE: "code/lenketeksempel2.java" src java

** Innsettingsmetoder
*** LIFO
Innsetting først (LIFO):

#+INCLUDE: "code/lenketeksempel3.java" src java
*** FIFO
Innsetting sist (FIFO):

#+INCLUDE: "code/lenkeeksempel4.java" src java

*** Innsetting etter et bestemt objekt

#+INCLUDE: "code/lenkeeksempel5.java" src java

** Skrive ut en lenket liste

#+INCLUDE: "code/lenkeeksempel6.java" src java
* Rekursjon

Kaller seg selv.
Midlertidig data lagres i en såkalt Call Stack. Når metode kommer til
return statement går man "baklengs" tilbake i call stacken og metoden
fortsetter etter der den kalte seg selv.

Klassisk eksempel på en rekursjonsmetode er dette fakultetseksempelet.

#+INCLUDE: "code/rekurseksempel.java" src java

Dersom fact() blir kalt med tallet 1, vil den returnere 1, ellers vil den returnere produktet av fact(n-1)*n. Denne metoden rekurserer inntil n = 1.
Når en metode kaller seg selv, vil nye lokale variable og parametere lagres i stack, og koden utføres med disse nye variablene og parameterene fra starten aav. Den lagerr ikke kopi av metoden, kun argumenter/variabler.
** Hanois tårn
* Trær
* Binære søketrær
* Søk
  hvis vi har sorterte data vil alltid binærsøk være den raskeste måten
  å søke på. Binærsøk så halverer vi antall muligheter for hver et eksempel
  fra den virkelige verden er hvis man skal gjette et tall mellom 1 og 1024
  og man har 10 gjetteforsøk, hvor man får vite om man gjettet for stort eller
  for lite, vil man alltid kunne finne tallet ved at man hele tiden halverer.

  eks: vi skal finne tallet (769)
  |-------------+-------+-----------------+--------| 
  | mulige tall | gjett | større / mindre | forsøk | 
  |-------------+-------+-----------------+--------| 
  |        1024 |   512 | større          |      1 | 
  |-------------+-------+-----------------+--------| 
  |         512 |   768 | større          |      2 | 
  |-------------+-------+-----------------+--------| 
  |         256 |   896 | mindre          |      3 | 
  |-------------+-------+-----------------+--------| 
  |         128 |   832 | mindre          |      4 | 
  |-------------+-------+-----------------+--------| 
  |          64 |   800 | mindre          |      5 | 
  |-------------+-------+-----------------+--------| 
  |          32 |   784 | mindre          |      6 | 
  |-------------+-------+-----------------+--------| 
  |          16 |   776 | mindre          |      7 | 
  |-------------+-------+-----------------+--------| 
  |           8 |   772 | mindre          |      8 | 
  |-------------+-------+-----------------+--------| 
  |           4 |   770 | mindre          |      9 | 
  |-------------+-------+-----------------+--------| 
  |           2 |   769 | riktig!         |     10 | 
  |-------------+-------+-----------------+--------| 

  ved usorterte mengder er det vanskeligere å gjøre strukturerte søk og det kan ofte
  være lurt å enten sortere det først, eller dele opp mengden i delmengder og søke hver
  del for seg selv.

** Eksempel på søking i usortert mengde med tråder

#+INCLUDE: "code/FinnMinst.java" src java
* Sortering
  Det er ofte en fordel å sortere store mengder data for å gjøre
  søking i i data effektivt om i det hele tatt mulig.

  Vi har gjennomgått flere forskjellige måter å sortere data på
  jeg vil her fokusere på følgende
  - innstikksortering
  - quicksort

** Innstikksortering
   veldig simpel sorteringsalgoritme som er effektiv på små mengder (i forhold til andre
   sorteringsalgoritmer), men taper mye når det er større mengder data som skal sorteres
   baserer seg på at man starter først i mengden og sorterer mens man itererer over mengden

#+INCLUDE: "instikksort.java" src java

** Quicksort

   Mer populær for mellomstore til store datamengder, den tar et objekt fra mengden og
   forterer listen etter hva som er større og mindre enn det objektet, deretter begynner
   den å sortere de to delene på samme måte rekursivt (dermed lettere å implementere
   tråder)

#+INCLUDE: "QSort.java" src java
** Sortering med tråder
* Packages og interaces
** Packages
Pakker er grupper med relaterte klasser, som hjelper deg med å 
organisere koden din. Klasser definert i en pakke, er kun tilgjengelig
via pakkenavnet. Med pakker har man også muligheten til å gjøre
klasser kun tilgjengelige fra innsiden av pakken, noe som kan gi økt
kontroll og sikkerhet. 

En annen stor fordel med pakker er at når du navngir en pakke,
opretter du et nytt /namespace/. Dette får man veldig bruk for når man
jobber på større prosjekter. To klasser i Java kan ikke ha samme navn,
for da får vi navnkollisjon. Men med namespaces løses dette. Det gjør
at vi kan ha to klasser med samme navn, men som ligger i forskjellige
pakker, eller namespaces, slik: /package01.CommonName.java/ og
/package02.CommonName.java/. 

Alle klasser i Java hører til en pakke, men når ingen blir spesifisert
blir default (global package) benyttet. Denne pakken har heller ikke
noe navn.

*** Opprette en pakke
For å oprette en pakke bruker vi følgende syntax:

#+BEGIN_SRC Java
package MyPackage01;
#+END_SRC

Selve filene i pakken må da legges i en mappe med nøyaktig samme navn,
/\/MyPackage01\//. Man kan også ha et hierarki av pakker, f.eks. 

#+BEGIN_SRC Java
package MyPackage01.MyPackage02...
#+END_SRC

Og vi definerer mappestrukturen deretter. Det kan være lurt å følge
Maven-mappestrukturen, da det er en godt organisert og veletablert
standard. 

For at Java skal finne pakkenne må de enten ligge i samme mappe som du
allerede jobber i, eller så kan man manuelt sett *CLASSPATH* som Java
leter etter.

** Interfaces
Bruker interface på en klasse hvis vi ønsker egenskaper som flere
forskjellige klasser skal arve. Metoder må skrives på nytt for hver
gang. Implementeres med implements ClassName.
* Access modifiers
** Tilgangsnivåer
| *Modifier*    | *Class* | *Package* | *Subclass* | *World* |
| /public/      | Y       | Y         | Y          | Y       |
| /protected/   | Y       | Y         | Y          | N       |
| /no modifier/ | Y       | Y         | N          | N       |
| /private/     | Y       | N         | N          | N       |
* generiske typer
Generiske typer: 
Objektholdere som kan holde hva som helst, egner seg godt til å lage datastrukturer, siden strukturen blir ikke avhengig av noen spesiell type objekt å
kan derfor brukes på hva som helst. 
#+INCLUDE: "code/generics.java" src java

*** Forklaring
Dette er en særdeles enkel utgave av en stack (FIFO-liste) som ikke
forutsetter at objektet i lista er av en spesiell type, Nodeclassen
er lagt inn som et nøstet objekt for å naturlig arve den generiske 
egenskapen.
* comparable
comparable er et interface i java api'en som brukes til å sammenligne objekter, og er ofte brukt i sorteringsalgoritmer.
#+INCLUDE: "code/comparable.java" src java
* Abstract
abstract forran klasse gjør at du ikke kan lage objekt av klassen. Kun
av ikke abstrakte subklasser. For å gi en mer virelighetslik
objektmodell.
abstracte metoder kan kun være i abstrakte klasser. Kan ikke inneholde
kode.. Kun subklassemetodene.
Klasser kan kun arve fra en superklasse.

* Subklasser og polyformi
* Untak (Exceptions)
* Finalize, garbagecollector etc
finalize() er en metode du kan definere i klasser, som automatisk
kjøres før objekter blir tatt av garbage collectoren og
slettes. F.eks. hvis du skal dobbeltsjekke at en fil har blitt lukket.

* Tråder - Threads

Kan implemenere Runnable eller extende Thread classs.
Tråder er små prosesser inne i én prosess. Det er raskerkere å skifte fra en tråd til en annen enn fra en prosess til en annen.
Å bruke flere prosesser/tråder for å løse en oppgave kalles paralellprogrammering.

Eksempel på en enkel tråd:

#+INCLUDE: "programeksemplertradeksempel.java" src java

* Brukergrensesnitt

import javax.swing.*; 
import java.awt.*;

class RammeDemo2 extends JFrame { 
    RammeDemo2() {
        // En annen måte å sette tittel på rammen:
        super(”Første vindu");                     
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    setSize(300,200);        
        setVisible(true);
    } 
    public static void main(String[] args) {
        new RammeDemo2();
    }
}


Anonym klasse, når klassen ikke har navn, og er skrevet som parameter
til en metode.

Bruk repaint()-metoden for å tegne vindu på nytt..
* Shorthands
#+BEGIN_SRC Java
if (condition) {
    return x;
}
return y;
#+END_SRC
Burde isteden skrives slik:
#+BEGIN_SRC Java
return (condition ? x : y);
#+END_SRC
* Prinsipper for større programmer
    -KISS
    -Moduler
        -Små
            -Definert av grensesnitt
            -Kun en funksjonalitet
                -F.eks. LinkedList
    -Dokumentasjon
    -Testing
    -Konvensjoner
        -Hvordan kode ser ut
        -Hvordan kode struktureres

* Emner gått igjennom på forelesning
** Om datastrukturer: Klasser, objekter, variabler, hva skjer?
** Lister, trær, FIFO, LIFO, Lenket liste
** Subklasser polyformi
** Generiske typer
** Abstrakte klasser og interface
** Binære søketrær
** Untak (Exceptions)
** Grafisk bruekrgrensesnitt
** REkursjon
** Tråder
** Hanois tårn
** Sortering (Quicksort etc)
** Sortering med tråder
** Software life cycle and software testing
* Software life cycle and software testing
