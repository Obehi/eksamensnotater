#+TITLE:     Sjur sine notater til eksamen v10 i inf1050
#+OPTIONS:   H:3
#+STYLE:     <link rel="stylesheet" type="text/css" href="org.css" />

* TODO Hovedtemaer
** Hvordan styres utviklingsprosessen

*** Valg av utviklingsprosess
**** fossefall
**** inkrementelle
**** iterative
**** spiralmodellen
**** XP
**** Scrum
**** RUP
*** Prosjektarbeid
**** organisering
**** aktivitetsplanlegging og -styring
**** nettverksdiagram

*** Estimering
**** kunde/leverandørforhold
**** vurdering av usikkerhet/risiko
**** historiske data
**** sjekklister
**** planning poker (ukesoppgave 5 v09)

*** Avtaler og kontrakter
**** PS2000
     - Avtale som ment å representere både kunde og leverandør.
**** Statens Standardavtale
     - For å ivareta leverandørens interesser.
**** IKT-Norge's standardavtale
     - For å ivareta kunders interesser.     - PS2000                    
**** prismodeller

*** Jus og etikk
**** sjekkliste relatert til personopplysningsloven

*** Endringshåndtering og konfigurasjonsstyring
**** versjoner vs varianter
**** versjonstre
**** forgrening/fletting

** Hvordan fastlegges utviklingsprosessen

*** Funksjonelle krav

*** ikke-funksjonelle krav

*** kravinnsamlingsmetoder
**** intervjuer
**** spørreskjemaer
**** observasjon
**** inspeksjon av dokumenter
**** brainstorming

*** Spesifikasjon, prioritering og validering av krav
**** testspesifikasjon
**** avhengighetsmatriser
**** evolusjonære prosesser

*** Detaljert spesifikasjon av funksjonelle krav vha UML-bruksmønstre
**** use case modell
**** include/extend
**** tekstlige spesifikasjoner

** Hvordan lages selve systemet

*** Objektorjentert analyse og design
**** kant-, kontroll og forretningsobjekter
**** INF1050-metoden
***** Use cace-CRC
***** sekvensdiagram
***** klassediagram
**** Rational Rose

*** Persistens/databaser
**** Relasjonsdatabaser
***** regler for ORmapping
**** datamodell som UML
**** klassediagram
**** SQL
**** Hibernate

*** Brukergrenssnitt og prototyping
**** brukervennlighet
**** Genova

*** Arkitektur og webaplikasjoner
**** fysisk/logisk arkitektur
**** tykke/tynne klienter

*** Validering og verifikasjon
**** forskjellige faser av testing
***** enhetstesting
***** integrasjonstesting
***** systemtesting
**** forskjellige typer testing
***** whitebox-testing
***** blackbox-testing

* Kjernepensum
** Interessenter (oblig 1)
*** Motivasjon og ledelse av prosjekter
    hvem bør ha ansvaret og hvorfor

    
    
*** Hvilke interessenter kan vi identifisere 
    og hvilke krav vil de typisk stille
*** Typiske utfordringer for et prosjekt og dets interessenter
*** Konkrete eksempler
    - Javazone
    - Flexus
    - Oslo kommune it-drift
    - GOLF/LOS
    - Min side
    - m.m
*** Sosio-tekniske systemer og prototyping
** Prosjektstyring og planlegging(oblig 1)
*** Vikigheten av foranalysen
    kravinsamling og research

    Uten en skikkelig foranalyse kan det være vanskelig
    å vite hvilke risikoer som er involvert, om systemet
    trengs, eller om det har livets rett økonomisk sett.
    
    Forutsigbarheten for prosjektet øker og man vil være
    bedre i stand til å levere prosjektet til rett tid eller
    minimere overskridelser av planen

*** Prosjektplanlegging og organisering
    viktige faktorer og rammer
    - tid
    - kostnad
    - personale
    - utstyr
    - osv
*** Riktig valg av systemutviklingsmetode
    begrunne valget
**** Fossefall
     Ved enkle og forutsigbare prosjekter, ofte veldig små
     prosjekter kan det være en mulighet å bruke denne, som
     regel vil det være lønnsomt å bruke en mer fleksibel 
     metode
**** Prototyping
     Lage en enkel versjon av programmet, i stor grad for å finne
     krav og passe på at man lager riktig program
**** Evolusjonære modeller
     Bygger ofte på en liten prototype som et rammeverk som man
     gradvis utvider med funksjonalitet kunden ønsker og finpusser
     til prosjektet til slutt er ferdig. Boka anbefaler denne metoden
     for små til mellomstore prosjekter.
**** Modulbasert
     Bygger i så stor grad som mulig på moduler som allerede eksisterer,
     gjennbruk av kode er et nøkkelord her. Alle prosjekter baserer
     seg i stor grad på gjennbruk av kode eller andre prosjekter, for eksempel
     databaser eller andre verktøy, og dette er den fullverdige metoden som 
     består av å finne flest mulig moduler og heller fokusere tiden på å
     skape bindemiddel mellom modulene.

     Farene med dette er at modulene kanskje ikke gjør akkurat det man vil
     og man vil kanskje skape et system som ikke passer helt, men bare godt nok

     Fordelen er jo at ved at man vet at modulene funker i utgangspunktet, vil 
     man kunne levere prosjektet raskere og med mindre risiko, og man kan også 
     håpe at noe av oppdateringer senere vil komme gjennom prosjektene som lager
     modulene.
**** Iterative
     Dele opp prosjektet i flere mini-proskelter (iterasjoner) der
     hvert mini-prosjekt bruker en annen utviklingsmetode.
***** Inkrementelle
      
***** Spiralmodellen
**** XP
     Veldig rettet mot hvordan gjennomføringsrettet, med programmeringsteknikker
     for eksempel par-programering (to programerere på en maskin, pilot og kopilot
     der piloten programmerer og kopiloten validerer koden fortløpende) og også
     måter å gjennomføre arkitektur og testing av systemet. Metodene er ikke 
     nødvendigvis bare gjennomførbare med XP, og brukes ofte som teknikker under
     andre systemutviklingsprosesser...
     
**** Scrum
**** RUP

*** Kjenne til ulike typer utviklingsmetoder og prinsipper
    fordeler og ulemper
*** Kjenne til ulike faser i de ulike utviklingsmetodene
    samt hvilke krav/leveranse hver fase har
*** vite hvorfor man setter milepæler
    og hvor det er naturlig å plasere dem i forhold til modellens faser
*** risiko, identifisering av risiko
    samt hvordan redusere risikomomenter
*** aktivitetskart og nettverksdiagram
*** Kritiske veier vs ikke-kritiske veier
** Kravhåndtering (oblig 2)

*** Funksjonelle vs ikke-funksjonelle krav
    Funksjonelle krav utføres av utvikler, resten kan overlates til andre

**** Gode krav
     kode krav bør bestå disse spørsmålene
     - Er de forsåelige?
     - Er det konsistens?
     - Er det kompletthet?
     - Er de testbare?
     - Er de verifiserbare?
     - Er de relevante?

**** Funksjonelle krav
***** essensielt
      - Tenk hva slags krav dere vil ha for å kunne lage use cases
      - Konkrete oppgaver som skal utføres
      - Enten/eller-scenarioer
***** Eksempler fra oblig 1
      - Systemet må kunne vise oversikt over ledige hotellrom
      - Resepsjonister og nettbrukere må kunne booke hotellrom
      - Systemet må kunne skrive ut raporter for alle hoteller
      - Nettbrukere må kunne få opp oversikt over sine reservasjoner
**** Ikke-funksjonelle krav
     * Produktkrav
       - Brukervennlighet
       - Effektivitetskrav
       - Pålitelighetskrav
       - Portabilitetskrav

     * Prosesskrav
       - leveransekrav
       - Implementasjonskrav
       - Krav til standard
     * Eksterne krav
       - Lovmessige krav
       - Etiske krav
***** Eksempler
****** Ytelse
       - Systemet skal behandle alle responser på under 1 sekund
       - Systemet skal ha en oppetid på 99,9%
****** Sikkerhet
       - Systemet skal tilby full backup 6 måneder tilbake i tid
       - Systemet skal ha sikker og kyptert forbindelse mellom hotellene og databasen
****** Andre ting
       - Krav til brukervennlighet
       - juridiske krav
	 Personopplysningsloven etc.
       - Ikke gjennbruk av mailadresser til spam?
****** Testing
       Whitebox og blackbox-testing
*** hvorfor trenger vi veldefinerte krav

    "a camel is a horse designed by a committee"

    Vi trenger veldefinerte krav for å ha holdeplasser i virkeligheten
    når vi utvikler et system, hva skal systemet gjøre og hvordan
    skal det fungere. Krav er et slags sikkerhetsnett for at man lager et 
    system som samsvarer med kundens behov. 

*** Koblingen mellom funksjonelle krav og ikke funksjonelle krav
    (bruksmønster og arkitektur)
    
    

*** Identifisering av krav
    hvilke krav følger typisk de ulike interessentene
** Avtaler og kontrakter (oblig 1)
*** Hvorfor er det viktig med avtaler/kontrakter i systemutvikling
    Eksempler på kontrakter
*** Viktige faktorer i valg av kontraktsform
    for eksempel fordeling av risiko, definering av oppgaver etc.
*** PS2000
**** Fordeler med PS2000
**** Eksempler på innhold
*** Incentivmodellen og målpriser
    fordeler og ulemper med fastpris og løpende pris i systemutvikling
*** Usikkerhetsmatrise og risikovurdering
    risiko = sannsynlighet * konsekvens
** Testing (ukesoppgave 5, oblig 1):
*** Hvordan teste krav
    samt forskjell på testing av funksjonelle vs. ikke-funksjonelle krav
*** Blackbox vs. whitebox-testing
*** Control Flow Graph?
    
*** Enhets-, integrasjons‐ og systemtesting, samt akseptansetesting
*** V-modell?
*** Utfordringer ved testing
    samt endrings- og konfigurasjonsstyring


** UML 
   Use case modellering, sekvensdiagrammer, klassediagrammer og domenemodell (ukesoppgave 6, 7, 8, oblig 2, 3):
*** Kjennskap til ulike UML-diagrammer
    diskusjon rundt UML som dokumentasjon/nytteverdi
*** Hvordan identifisere bruksmønstre?
*** Hvordan gå fra funksjonelle krav til modell
*** Pre- og postbetingelser, trigger og aktører.
    Hovedflyt og alternativ flyt for bruksmønstre.
*** CRC-kort
    hva representerer de og hvorfor bruke dem?
*** Å kunne identifisere kontroll-, kant- og forretningsobjekter
*** Domenemodell (domeneklassediagram)
*** Include/extend-relasjoner + generalisering
*** Persistens 
    livslengde på kontroll og kantobjekter kontra data som lagres i databaser
*** Tekstlig beskrivelse
    spesifikasjon av et bruksmønster hoved- og alternativflyt
*** Riktig bruk i bruksmønsterspesifikasjonen av:
**** pre- og postbetingelser
**** trigger
**** aktører
**** antakelser
*** Sekvensdiagrammer 
    med riktig oppsett av objekter, metoder, <<create>> og samhanlding med kant
*** Delegert vs. sentralisert kontrollstil 
    fordeler og ulemper
*** Relasjoner mellom objektene
    assosiasjoner, roller, arv og riktig bruk av attributter og metoder i objektene

** Arkitektur (ukesoppgave 2, 9, oblig 1, min gjennomgang):
*** Lagdeling: Fysiske lag og logiske lag
*** Klassisk trelagsinndeling av arkitektur 
    (3-skjemaarkitektur)
*** Identifisering av lag og utvidelse av lag, samt eksempler
*** Ikke-funksjonelle kravs rolle i systemets arkitektur
*** Maciaszeks syv tommelfingerregler for godt brukergrensesnitt

** Øvrige temaer:
*** Estimering og kostnadsoverskridelser, samt konsekvenser det medfører, estimeringsmodeller og faser
*** Utfordringen med estimering i systemutviklingsbransjen (forelesning om estimering, V2009)
*** Konfigurasjonsstyring, versjonskontroll med for eksempel Subversion (ukesoppgave 10), SCCM
*** Lagring av data, objekt- og relasjonsdatabaser, SQL-syntaks
*** Genova! (oblig 3)
*** Personopplysningsloven og tilhørende juridiske temaer som er tatt opp
